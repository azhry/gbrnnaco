/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Boundary;

import Control.FileHandler;
import Control.MathFx;
import Entity.ImageData;
import NeuralNetwork.ConfusionMatrix;
import NeuralNetwork.NeuralNetwork;
import AntColonyOptimization.AntColonyOptimization;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Azhary Arliansyah
 */
public class Main extends javax.swing.JFrame {
    
    private List<ImageData> data;
    private List<ImageData> programData;
    private List<ImageRow> rowData;
    private List<OutputNeuronLog> rowLog;
    private DefaultTableModel resultProgramModel;
    private boolean shuffled = false;

    /**
     * Creates new form Home
     */
    public Main() {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageListPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        loadImageButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        runGaborButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        gammaField = new javax.swing.JTextField();
        lambdaField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sigmaField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        kernelWidthField = new javax.swing.JSpinner();
        kernelHeightField = new javax.swing.JSpinner();
        psiDegField = new javax.swing.JSpinner();
        thetaDegField = new javax.swing.JSpinner();
        jToolBar3 = new javax.swing.JToolBar();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        splitRatioText = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        outputNeuronLogPanel = new javax.swing.JPanel();
        classifiedRatio = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        nnResultTable = new javax.swing.JTable();
        neuralNetworkLossChart = new javax.swing.JLabel();
        neuralNetworkProgressBar = new javax.swing.JProgressBar();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        nnAcoResultTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        neuralNetworkAcoProgressBar = new javax.swing.JProgressBar();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel10 = new javax.swing.JPanel();
        runNeuralNetworkButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        epochField = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        learningRateField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        runNeuralNetworkAcoButton = new javax.swing.JButton();
        populationField = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        iterationField = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        alphaField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        betaField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        evaporationField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        rewardFactorField = new javax.swing.JTextField();
        jToolBar4 = new javax.swing.JToolBar();
        jPanel12 = new javax.swing.JPanel();
        jSplitPane6 = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultProgramTable = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        loadImageProgramButton = new javax.swing.JButton();
        runNeuralNetworkProgramButton = new javax.swing.JButton();
        runNeuralNetworkAcoProgramButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 799, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
        );

        jToolBar1.add(jPanel1);

        jTabbedPane1.addTab("Home", jToolBar1);

        jToolBar2.setRollover(true);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(140);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        imageListPanel.setLayout(new javax.swing.BoxLayout(imageListPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(imageListPanel);

        jSplitPane1.setRightComponent(jScrollPane1);

        loadImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-add-folder-filled-36.png"))); // NOI18N
        loadImageButton.setText("Load Image");
        loadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageData(evt);
            }
        });

        progressBar.setBackground(new java.awt.Color(0, 204, 51));
        progressBar.setForeground(new java.awt.Color(0, 0, 0));
        progressBar.setToolTipText("");
        progressBar.setString("");
        progressBar.setStringPainted(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gabor Parameters");

        runGaborButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-play-24.png"))); // NOI18N
        runGaborButton.setText("Run Gabor");
        runGaborButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runGabor(evt);
            }
        });

        jLabel2.setText("Gamma");

        gammaField.setText("1.0");

        lambdaField.setText("4");

        jLabel3.setText("Lambda");

        sigmaField.setText("1.4");

        jLabel4.setText("Sigma");

        jLabel5.setText("Psi. Degree");

        jLabel6.setText("Theta Degree");

        jLabel7.setText("Kernel Width");

        jLabel8.setText("Kernel Height");

        kernelWidthField.setValue(10);

        kernelHeightField.setValue(10);

        thetaDegField.setValue(135);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(runGaborButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gammaField)
                    .addComponent(lambdaField)
                    .addComponent(sigmaField)
                    .addComponent(kernelWidthField)
                    .addComponent(kernelHeightField)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(psiDegField)
                    .addComponent(thetaDegField))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(loadImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gammaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lambdaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sigmaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(psiDegField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thetaDegField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kernelWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kernelHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runGaborButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.add(jSplitPane1);

        jToolBar2.add(jPanel2);

        jTabbedPane1.addTab("ETL", jToolBar2);

        jToolBar3.setRollover(true);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane2.setDividerLocation(200);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Evaluation");

        splitRatioText.setText("0.7");

        jLabel14.setText("Split Ratio");

        outputNeuronLogPanel.setLayout(new javax.swing.BoxLayout(outputNeuronLogPanel, javax.swing.BoxLayout.Y_AXIS));

        classifiedRatio.setText("0/0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(splitRatioText)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(outputNeuronLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classifiedRatio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(3, 3, 3)
                .addComponent(splitRatioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(classifiedRatio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputNeuronLogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel6);

        jSplitPane3.setDividerLocation(386);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane4.setDividerLocation(300);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Neural Network");

        nnResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Accuracy", null},
                {"Precision", null},
                {"Recall", null},
                {"F-Measure", null}
            },
            new String [] {
                "", "Result"
            }
        ));
        jScrollPane2.setViewportView(nnResultTable);

        neuralNetworkLossChart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        neuralNetworkLossChart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-system-task-100.png"))); // NOI18N

        neuralNetworkProgressBar.setString("");
        neuralNetworkProgressBar.setStringPainted(true);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(neuralNetworkLossChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(neuralNetworkProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neuralNetworkLossChart, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neuralNetworkProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 31, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(jPanel5);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Neural Network + ACO");

        nnAcoResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Accuracy", null},
                {"Precision", null},
                {"Recall", null},
                {"F-Measure", null}
            },
            new String [] {
                "", "Result"
            }
        ));
        jScrollPane3.setViewportView(nnAcoResultTable);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-system-task-100.png"))); // NOI18N

        neuralNetworkAcoProgressBar.setStringPainted(true);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(neuralNetworkAcoProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neuralNetworkAcoProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jSplitPane4.setRightComponent(jPanel8);

        jSplitPane3.setTopComponent(jSplitPane4);

        jSplitPane5.setDividerLocation(300);

        runNeuralNetworkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-play-24.png"))); // NOI18N
        runNeuralNetworkButton.setText("Run Neural Network");
        runNeuralNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runNeuralNetwork(evt);
            }
        });

        jLabel21.setText("Epoch");

        epochField.setValue(1000);

        jLabel22.setText("Learning Rate");

        learningRateField.setText("0.55");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runNeuralNetworkButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addGap(71, 71, 71))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(epochField)
                            .addGap(32, 32, 32)))
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(learningRateField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(epochField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(learningRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(runNeuralNetworkButton))
        );

        jSplitPane5.setLeftComponent(jPanel10);

        runNeuralNetworkAcoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-play-24.png"))); // NOI18N
        runNeuralNetworkAcoButton.setText("Run Neural Network + ACO");
        runNeuralNetworkAcoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runNeuralNetworkAcoButtonActionPerformed(evt);
            }
        });

        populationField.setValue(10);

        jLabel15.setText("Population");

        iterationField.setValue(10);

        jLabel16.setText("Iteration");

        alphaField.setText("0.7");

        jLabel17.setText("Alpha");

        betaField.setText("0.3");

        jLabel18.setText("Beta");

        evaporationField.setText("0.5");

        jLabel19.setText("Evaporation Rate");

        jLabel20.setText("Reward Factor");

        rewardFactorField.setText("0.5");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runNeuralNetworkAcoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(populationField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(alphaField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(evaporationField)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iterationField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(betaField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(rewardFactorField))))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(populationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alphaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(evaporationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iterationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(betaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rewardFactorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(runNeuralNetworkAcoButton))
        );

        jSplitPane5.setRightComponent(jPanel11);

        jSplitPane3.setRightComponent(jSplitPane5);

        jSplitPane2.setRightComponent(jSplitPane3);

        jPanel4.add(jSplitPane2);

        jToolBar3.add(jPanel4);

        jTabbedPane1.addTab("Classification", jToolBar3);

        jToolBar4.setRollover(true);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane6.setDividerLocation(170);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        resultProgramTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image File", "Actual Label", "Predicted Label", "Correct"
            }
        ));
        jScrollPane4.setViewportView(resultProgramTable);

        jSplitPane6.setRightComponent(jScrollPane4);

        loadImageProgramButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-add-folder-filled-36.png"))); // NOI18N
        loadImageProgramButton.setText("Load Image");
        loadImageProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageProgramButtonloadImageData(evt);
            }
        });

        runNeuralNetworkProgramButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-play-24.png"))); // NOI18N
        runNeuralNetworkProgramButton.setText("Run Neural Network");
        runNeuralNetworkProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runNeuralNetworkProgramButton(evt);
            }
        });

        runNeuralNetworkAcoProgramButton.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        runNeuralNetworkAcoProgramButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-play-24.png"))); // NOI18N
        runNeuralNetworkAcoProgramButton.setText("Run Neural Network + ACO");
        runNeuralNetworkAcoProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runNeuralNetworkAcoProgramButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadImageProgramButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(runNeuralNetworkProgramButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(runNeuralNetworkAcoProgramButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(loadImageProgramButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(runNeuralNetworkProgramButton)
                .addGap(18, 18, 18)
                .addComponent(runNeuralNetworkAcoProgramButton)
                .addContainerGap(445, Short.MAX_VALUE))
        );

        jSplitPane6.setLeftComponent(jPanel13);

        jPanel12.add(jSplitPane6);

        jToolBar4.add(jPanel12);

        jTabbedPane1.addTab("Program", jToolBar4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Home");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadImageData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageData
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Dataset Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.imageListPanel.removeAll();
            this.data = new ArrayList<>();
            this.rowData = new ArrayList<>();
            new LoadImageWorker(
                    chooser.getSelectedFile().toString(), 
                    this.imageListPanel,
                    this.data,
                    this.rowData,
                    this.progressBar)
                    .execute();
            
        } 
        else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_loadImageData

    private void runGabor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runGabor
        
        double height = Double.parseDouble(
                String.valueOf(this.kernelHeightField.getValue()));
        double width = Double.parseDouble(
                String.valueOf(this.kernelWidthField.getValue()));
        double sigma = Double.parseDouble(this.sigmaField.getText());
        double thetaDeg = Double.parseDouble(
                String.valueOf(this.thetaDegField.getValue()));
        double lambda = Double.parseDouble(this.lambdaField.getText());
        double gamma = Double.parseDouble(this.gammaField.getText());
        double psiDeg = Double.parseDouble(
                String.valueOf(this.psiDegField.getValue()));
        
        Size kernelSize = new Size(width, height);
        double theta = thetaDeg * Math.PI / 180;
        double psi = psiDeg * Math.PI / 180;
        
        Mat kernel = Imgproc.getGaborKernel(
                kernelSize, sigma, theta, lambda, gamma);
        
        new RunGaborWorker(
                    kernel,
                    this.imageListPanel,
                    this.data, 
                    this.rowData, 
                    this.progressBar)
                    .execute();
        
    }//GEN-LAST:event_runGabor

    private void runNeuralNetwork(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runNeuralNetwork

        this.rowLog = new ArrayList<>();
        this.outputNeuronLogPanel.removeAll();
        
        Object[] labels = FileHandler.LABELS.keySet().toArray();
        Map<String, double[]> encodedLabels = new HashMap<>();
        for (int i = 0; i < labels.length; i++) {
            double[] encoded = new double[labels.length];
            encoded[i] = 1.0;
            encodedLabels.put((String)labels[i], encoded);
            
            OutputNeuronLog log = new OutputNeuronLog();
            log.labelText.setText((String)labels[i]);
            log.valueText.setText("0.00");
            this.rowLog.add(log);
        }
        
        for (OutputNeuronLog log : this.rowLog) {
            this.outputNeuronLogPanel.add(log);
        }
        
        List<double[]> features = new ArrayList<>();
        List<double[]> classes = new ArrayList<>();
        
        if (!this.shuffled) {
            this.shuffled = true;
            Collections.shuffle(this.data);
        }
        
        for (ImageData img : this.data) {
            features.add(img.getFilteredData());
            classes.add(encodedLabels.get(img.getLabel()));
        }
        
        double[][] finalFeatures = new double[features.size()][];
        double[][] finalClasses = new double[classes.size()][];
        for (int i = 0; i < features.size(); i++) {
            finalFeatures[i] = features.get(i);
            finalClasses[i] = classes.get(i);
        }
        
        int epoch = Integer.parseInt(String.valueOf(this.epochField.getValue()));
        double learningRate = Double.parseDouble(
                this.learningRateField.getText());
        double splitRatio = Double.parseDouble(this.splitRatioText.getText());
        NeuralNetwork nn = new NeuralNetwork(finalFeatures, finalClasses, 
                labels.length + 2, learningRate, epoch, splitRatio);
        new RunNeuralNetworkWorker(nn, this.neuralNetworkProgressBar, 
                this.neuralNetworkLossChart, this.rowLog, this.classifiedRatio, 
                this.nnResultTable)
                .execute();
        
    }//GEN-LAST:event_runNeuralNetwork

    private void loadImageProgramButtonloadImageData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageProgramButtonloadImageData
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Dataset Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        List<String> filenames = new ArrayList<>();
        List<String> labels = new ArrayList<>();
        this.programData = new ArrayList<>();
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            
            FileHandler.read(chooser.getSelectedFile().toString());
            
            int rowCount = 0;
            for (Map.Entry<String, List<String>> ent: 
                FileHandler.LABELS.entrySet()) {
                
                String path = chooser.getSelectedFile().toString() + "/" + ent.getKey();
                for (String filename : ent.getValue()) {
                    
                    filenames.add(filename);
                    labels.add(ent.getKey());
                    
                    try {
                        Image rawImage = ImageIO.read(new File(
                                path + "/" + filename));
                        this.programData.add(new ImageData(
                                path + "/" + filename, ent.getKey()));
                        
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName())
                                .log(Level.SEVERE, null, ex);
                    }
                    rowCount++;
                }
                
            }
            
            this.resultProgramModel = 
                    (DefaultTableModel)this.resultProgramTable.getModel();
            this.resultProgramModel.setRowCount(rowCount);
            this.resultProgramModel.setColumnCount(4);
            
            for (int i = 0; i < rowCount; i++) {
                this.resultProgramModel.setValueAt(filenames.get(i), i, 0);
                this.resultProgramModel.setValueAt(labels.get(i), i, 1);
            }
        } 
        else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_loadImageProgramButtonloadImageData

    private void runNeuralNetworkProgramButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runNeuralNetworkProgramButton
        double height = Double.parseDouble(
                String.valueOf(this.kernelHeightField.getValue()));
        double width = Double.parseDouble(
                String.valueOf(this.kernelWidthField.getValue()));
        double sigma = Double.parseDouble(this.sigmaField.getText());
        double thetaDeg = Double.parseDouble(
                String.valueOf(this.thetaDegField.getValue()));
        double lambda = Double.parseDouble(this.lambdaField.getText());
        double gamma = Double.parseDouble(this.gammaField.getText());
        double psiDeg = Double.parseDouble(
                String.valueOf(this.psiDegField.getValue()));
        
        Size kernelSize = new Size(width, height);
        double theta = thetaDeg * Math.PI / 180;
        double psi = psiDeg * Math.PI / 180;
        
        Mat kernel = Imgproc.getGaborKernel(
                kernelSize, sigma, theta, lambda, gamma);
        
        Object[] labels = FileHandler.LABELS.keySet().toArray();
        Map<String, double[]> encodedLabels = new HashMap<>();
        for (int i = 0; i < labels.length; i++) {
            double[] encoded = new double[labels.length];
            encoded[i] = 1.0;
            encodedLabels.put((String)labels[i], encoded);
        }
        
        List<double[]> features = new ArrayList<>();
        List<double[]> classes = new ArrayList<>();
        
        for (ImageData img : this.programData) {
            img.filterImg(kernel);
            features.add(img.getFilteredData());
            classes.add(encodedLabels.get(img.getLabel()));
        }
        
        double[][] finalFeatures = new double[features.size()][];
        double[][] finalClasses = new double[classes.size()][];
        for (int i = 0; i < features.size(); i++) {
            finalFeatures[i] = features.get(i);
            finalClasses[i] = classes.get(i);
        }
        
        int epoch = Integer.parseInt(String.valueOf(this.epochField.getValue()));
        double learningRate = Double.parseDouble(
                this.learningRateField.getText());
        double splitRatio = Double.parseDouble(this.splitRatioText.getText());
        NeuralNetwork nn = new NeuralNetwork(finalFeatures, finalClasses, 
                labels.length + 2);
        double[][] predicted = nn.predict(finalFeatures);
        for (int i = 0; i < finalFeatures.length; i++) {
            this.resultProgramModel.setValueAt(labels[MathFx
                    .maxIndex(predicted[i])].toString(), i, 2);
            this.resultProgramModel.setValueAt(MathFx.maxIndex(predicted[i]) 
                    == MathFx.maxIndex(finalClasses[i]), i, 3);
        }
    }//GEN-LAST:event_runNeuralNetworkProgramButton

    private void runNeuralNetworkAcoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runNeuralNetworkAcoButtonActionPerformed
        // TODO add your handling code here:
        double height = Double.parseDouble(
                String.valueOf(this.kernelHeightField.getValue()));
        double width = Double.parseDouble(
                String.valueOf(this.kernelWidthField.getValue()));
        double sigma = Double.parseDouble(this.sigmaField.getText());
        double thetaDeg = Double.parseDouble(
                String.valueOf(this.thetaDegField.getValue()));
        double lambda = Double.parseDouble(this.lambdaField.getText());
        double gamma = Double.parseDouble(this.gammaField.getText());
        double psiDeg = Double.parseDouble(
                String.valueOf(this.psiDegField.getValue()));
        
        int population = Integer.parseInt(
                String.valueOf(this.populationField.getValue()));
        int iteration = Integer.parseInt(
                String.valueOf(this.iterationField.getValue()));
        double alpha = Double.parseDouble(this.alphaField.getText());
        double beta = Double.parseDouble(this.betaField.getText());
        double evaporationRate = Double.parseDouble(this.evaporationField.getText());
        double rewardFactor = Double.parseDouble(this.rewardFactorField.getText());
        
        Size kernelSize = new Size(width, height);
        double theta = thetaDeg * Math.PI / 180;
        double psi = psiDeg * Math.PI / 180;
        
        Mat kernel = Imgproc.getGaborKernel(
                kernelSize, sigma, theta, lambda, gamma);
        
        Object[] labels = FileHandler.LABELS.keySet().toArray();
        Map<String, double[]> encodedLabels = new HashMap<>();
        for (int i = 0; i < labels.length; i++) {
            double[] encoded = new double[labels.length];
            encoded[i] = 1.0;
            encodedLabels.put((String)labels[i], encoded);
        }
        
        List<double[]> features = new ArrayList<>();
        List<double[]> classes = new ArrayList<>();
        
        if (!this.shuffled) {
            this.shuffled = true;
            Collections.shuffle(this.data);
        }
        
        
        for (ImageData img : this.data) {
            features.add(img.getFilteredData());
            classes.add(encodedLabels.get(img.getLabel()));
        }
        
        double[][] finalFeatures = new double[features.size()][];
        double[][] finalClasses = new double[classes.size()][];
        for (int i = 0; i < features.size(); i++) {
            finalFeatures[i] = features.get(i);
            finalClasses[i] = classes.get(i);
        }
        
        int epoch = Integer.parseInt(String.valueOf(this.epochField.getValue()));
        double learningRate = Double.parseDouble(
                this.learningRateField.getText());
        double splitRatio = Double.parseDouble(this.splitRatioText.getText());
        NeuralNetwork nn = new NeuralNetwork(finalFeatures, finalClasses, 
                labels.length + 2, learningRate, epoch, splitRatio);

        System.out.println("START ACO");
        new RunNeuralNetworkAcoWorker(nn, this.neuralNetworkAcoProgressBar, 
                this.nnAcoResultTable, population, 1.0, alpha, beta, 
                evaporationRate, rewardFactor, iteration, finalFeatures, finalClasses, 
                labels.length + 2, learningRate, epoch, splitRatio)
                .execute();
        
    }//GEN-LAST:event_runNeuralNetworkAcoButtonActionPerformed

    private void runNeuralNetworkAcoProgramButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runNeuralNetworkAcoProgramButton
        // TODO add your handling code here:
        double height = Double.parseDouble(
                String.valueOf(this.kernelHeightField.getValue()));
        double width = Double.parseDouble(
                String.valueOf(this.kernelWidthField.getValue()));
        double sigma = Double.parseDouble(this.sigmaField.getText());
        double thetaDeg = Double.parseDouble(
                String.valueOf(this.thetaDegField.getValue()));
        double lambda = Double.parseDouble(this.lambdaField.getText());
        double gamma = Double.parseDouble(this.gammaField.getText());
        double psiDeg = Double.parseDouble(
                String.valueOf(this.psiDegField.getValue()));
        
        Size kernelSize = new Size(width, height);
        double theta = thetaDeg * Math.PI / 180;
        double psi = psiDeg * Math.PI / 180;
        
        Mat kernel = Imgproc.getGaborKernel(
                kernelSize, sigma, theta, lambda, gamma);
        
        Object[] labels = FileHandler.LABELS.keySet().toArray();
        Map<String, double[]> encodedLabels = new HashMap<>();
        for (int i = 0; i < labels.length; i++) {
            double[] encoded = new double[labels.length];
            encoded[i] = 1.0;
            encodedLabels.put((String)labels[i], encoded);
        }
        
        List<double[]> features = new ArrayList<>();
        List<double[]> classes = new ArrayList<>();
        
        for (ImageData img : this.programData) {
            img.filterImg(kernel);
            features.add(img.getFilteredData());
            classes.add(encodedLabels.get(img.getLabel()));
        }
        
        double[][] finalFeatures = new double[features.size()][];
        double[][] finalClasses = new double[classes.size()][];
        for (int i = 0; i < features.size(); i++) {
            finalFeatures[i] = features.get(i);
            finalClasses[i] = classes.get(i);
        }
        
        int epoch = Integer.parseInt(String.valueOf(this.epochField.getValue()));
        double learningRate = Double.parseDouble(
                this.learningRateField.getText());
        double splitRatio = Double.parseDouble(this.splitRatioText.getText());
        NeuralNetwork nn = new NeuralNetwork(finalFeatures, finalClasses, 
                labels.length + 2);
        double[][] predicted = nn.predictOpt(finalFeatures);
        for (int i = 0; i < finalFeatures.length; i++) {
            this.resultProgramModel.setValueAt(labels[MathFx
                    .maxIndex(predicted[i])].toString(), i, 2);
            this.resultProgramModel.setValueAt(MathFx.maxIndex(predicted[i]) 
                    == MathFx.maxIndex(finalClasses[i]), i, 3);
        }
    }//GEN-LAST:event_runNeuralNetworkAcoProgramButton

    class RunNeuralNetworkAcoWorker extends SwingWorker {

        private final NeuralNetwork nn;
        private final JProgressBar progressBar;
        private final javax.swing.JTable resultTable;
        private final int numberOfAnts;
        private final double Q;
        private final double alpha;
        private final double beta;
        private final int iteration;
        private final double[][] features;
        private final double[][] classes;
        private final int numHiddenNeuron;
        private final int epoch;
        private final double splitRatio;
        private final double learningRate;
        private final double evaporationRate;
        
        public RunNeuralNetworkAcoWorker(NeuralNetwork nn, 
                JProgressBar progressBar,  
                javax.swing.JTable resultTable, 
                int numberOfAnts, double Q, double alpha, double beta, 
                double evaporationRate, double rewardFactor,
                int iteration, double[][] features, double[][] classes, 
                int numHiddenNeuron, double learningRate, int epoch, 
                double splitRatio) {
            
            this.nn = nn;
            this.progressBar = progressBar;
            this.resultTable = resultTable;
            this.numberOfAnts = numberOfAnts;
            this.Q = Q;
            this.evaporationRate = evaporationRate;
            this.alpha = alpha;
            this.beta = beta;
            this.iteration = iteration;
            this.features = features;
            this.classes = classes;
            this.numHiddenNeuron = numHiddenNeuron;
            this.epoch = epoch;
            this.splitRatio = splitRatio;
            this.learningRate = learningRate;
        }
        
        @Override
        protected void done() {
           
            JOptionPane.showMessageDialog(null, 
                    "Ant Colony Optimization process is done", "Done", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            repaint();
        }
        
        @Override
        protected Object doInBackground() throws Exception {
            
            AntColonyOptimization aco = new AntColonyOptimization(this.nn, 
                    this.numberOfAnts, this.Q, this.alpha, this.beta, 
                    this.iteration);
            aco.executeAco(this.features, this.classes, this.numHiddenNeuron, 
                    this.learningRate, this.epoch, this.splitRatio, 
                    this.progressBar, this.resultTable);
            return null;
        }
        
    }
    
    
    class RunNeuralNetworkWorker extends SwingWorker {

        private final NeuralNetwork nn;
        private final JProgressBar progressBar;
        private final javax.swing.JLabel lossChart;
        private final javax.swing.JLabel classifiedRatioText;
        private final javax.swing.JTable nnResultTable;
        private final List<OutputNeuronLog> logs;
        
        public RunNeuralNetworkWorker(NeuralNetwork nn, 
                JProgressBar progressBar, javax.swing.JLabel lossChart, 
                List<OutputNeuronLog> logs, 
                javax.swing.JLabel classifiedRatioText, 
                javax.swing.JTable nnResultTable) {
            
            this.nn = nn;
            this.progressBar = progressBar;
            this.lossChart = lossChart;
            this.logs = logs;
            this.classifiedRatioText = classifiedRatioText;
            this.nnResultTable = nnResultTable;
        }
        
        @Override
        protected void done() {
           
            JOptionPane.showMessageDialog(null, 
                    "Neural Network process is done", "Done", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            repaint();
        }
        
        @Override
        protected Object doInBackground() throws Exception {
            this.nn.fit(this.progressBar, this.lossChart, this.logs, 
                    this.classifiedRatioText, this.nnResultTable);
            return null;
        }
        
    }
    
    class LoadImageWorker extends SwingWorker {

        private String path;
        private JPanel imagePanel;
        private JProgressBar progressBar;
        private List<ImageRow> rowData;
        private List<ImageData> data;
        
        public LoadImageWorker(String path, JPanel imagePanel, 
                List<ImageData> data, List<ImageRow> rowData, 
                JProgressBar progressBar) {
            this.path = path;
            this.imagePanel = imagePanel;
            this.progressBar = progressBar;
            this.rowData = rowData;
            this.data = data;
        }
        
        @Override
        protected void done() {
           
            JOptionPane.showMessageDialog(null, 
                    "All image successfully loaded", "Done", 
                    JOptionPane.INFORMATION_MESSAGE);
            for (ImageRow ir : this.rowData) {
                this.imagePanel.add(ir);
            }
            
            repaint();
        }
        
        @Override
        protected Object doInBackground() throws Exception {
            FileHandler.read(this.path);
            
            int loadedFiles = 0;
            for (Map.Entry<String, List<String>> ent: 
                FileHandler.LABELS.entrySet()) {
                
                String path = this.path + "/" + ent.getKey();
                for (String filename : ent.getValue()) {
                    
                    ImageRow ir = new ImageRow();
                    ir.filename.setText(filename);
                    ir.filelabel.setText(ent.getKey());
                    
                    try {
                        Image rawImage = ImageIO.read(new File(
                                path + "/" + filename));
                        ir.rawImage.setIcon(new ImageIcon(rawImage));
                        this.rowData.add(ir);
                        this.data.add(new ImageData(
                                path + "/" + filename, ent.getKey()));
                        
                        loadedFiles++;
                        int progress = (int)(((double)loadedFiles/
                                        (double)FileHandler.NUM_FILES) * 100);
                        this.progressBar.setValue(progress);
                        this.progressBar.setString("Loading Images " + 
                                progress + "%");
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName())
                                .log(Level.SEVERE, null, ex);
                    }

                }
                
            }
            
            return null;
        }
        
    }
    
    class RunGaborWorker extends SwingWorker {

        private JPanel imagePanel;
        private JProgressBar progressBar;
        private List<ImageRow> rowData;
        private List<ImageData> data;
        private Mat kernel;
        
        public RunGaborWorker(Mat kernel, JPanel imagePanel, 
                List<ImageData> data, List<ImageRow> rowData, 
                JProgressBar progressBar) {
            this.imagePanel = imagePanel;
            this.progressBar = progressBar;
            this.rowData = rowData;
            this.data = data;
            this.kernel = kernel;
        }
        
        @Override
        protected void done() {
           
            JOptionPane.showMessageDialog(null, 
                    "All image successfully filtered", "Done", 
                    JOptionPane.INFORMATION_MESSAGE);
           for (int i = 0; i < this.data.size(); i++) {
               ImageData id = this.data.get(i);
               Image filteredImage = id.getBufferFilteredImg();
               this.rowData.get(i).filteredImage
                       .setIcon(new ImageIcon(filteredImage));
           }
            
            repaint();
        }
        
        @Override
        protected Object doInBackground() throws Exception {
            int loadedFiles = 0;
            for (ImageData row : this.data) {
                row.filterImg(this.kernel);
                loadedFiles++;
                int progress = (int)(((double)loadedFiles/
                                (double)this.data.size()) * 100);
                this.progressBar.setValue(progress);
                this.progressBar.setString("Filtering Images " + 
                        progress + "%");
            }
            
            return null;
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alphaField;
    private javax.swing.JTextField betaField;
    private javax.swing.JLabel classifiedRatio;
    private javax.swing.JSpinner epochField;
    private javax.swing.JTextField evaporationField;
    private javax.swing.JTextField gammaField;
    private javax.swing.JPanel imageListPanel;
    private javax.swing.JSpinner iterationField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JSpinner kernelHeightField;
    private javax.swing.JSpinner kernelWidthField;
    private javax.swing.JTextField lambdaField;
    private javax.swing.JTextField learningRateField;
    private javax.swing.JButton loadImageButton;
    private javax.swing.JButton loadImageProgramButton;
    private javax.swing.JProgressBar neuralNetworkAcoProgressBar;
    private javax.swing.JLabel neuralNetworkLossChart;
    private javax.swing.JProgressBar neuralNetworkProgressBar;
    private javax.swing.JTable nnAcoResultTable;
    private javax.swing.JTable nnResultTable;
    private javax.swing.JPanel outputNeuronLogPanel;
    private javax.swing.JSpinner populationField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JSpinner psiDegField;
    private javax.swing.JTable resultProgramTable;
    private javax.swing.JTextField rewardFactorField;
    private javax.swing.JButton runGaborButton;
    private javax.swing.JButton runNeuralNetworkAcoButton;
    private javax.swing.JButton runNeuralNetworkAcoProgramButton;
    private javax.swing.JButton runNeuralNetworkButton;
    private javax.swing.JButton runNeuralNetworkProgramButton;
    private javax.swing.JTextField sigmaField;
    private javax.swing.JTextField splitRatioText;
    private javax.swing.JSpinner thetaDegField;
    // End of variables declaration//GEN-END:variables
}
